buildscript {
    ext {
        kotlin_version = "1.5.31"
        kotlin_coroutines_version = "1.4.3"
        lifecycle_version = "2.2.0"
        okhttp_version = "4.9.2"
        play_services_ads = "20.4.0"
        play_services_location = "17.1.0"
        retrofit_version = "2.9.0"
        worker_version = "2.7.0"
        room_version = "2.3.0"
        easy_permission = "0.1.0"
        koin_version = "3.1.2"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jacoco:org.jacoco.core:0.8.6"
    }
}

subprojects {
    repositories {
        google()
        mavenCentral()
    }

    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
    apply from: '../jacoco.gradle'
    apply from: '../publish.gradle'

    android {
        compileSdkVersion 31
        buildToolsVersion "30.0.3"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
            versionCode 1
            versionName "${project.version}"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"

            buildConfigField "String", "SDK_VERSION", "\"${project.version}\""
            buildConfigField "String", "PRE_PROD_CLIENT_ID", findApiKey("PRE_PROD_CLIENT_ID")
            buildConfigField "String", "PRE_PROD_CLIENT_SECRET", findApiKey("PRE_PROD_CLIENT_SECRET")
            buildConfigField "String", "PRE_PROD_REDIRECT_URI", findApiKey("PRE_PROD_REDIRECT_URI")
            buildConfigField "String", "PROD_CLIENT_ID", findApiKey("PROD_CLIENT_ID")
            buildConfigField "String", "PROD_CLIENT_SECRET", findApiKey("PROD_CLIENT_SECRET")
            buildConfigField "String", "PROD_REDIRECT_URI", findApiKey("PROD_REDIRECT_URI")
        }

        sourceSets {
            main {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                res.srcDirs = ['src/main/res']
            }
        }

        buildTypes {
            debug {
                testCoverageEnabled true
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            coreLibraryDesugaringEnabled = true
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
        }

        lintOptions {
            abortOnError false
        }
    }

    dependencies {
        coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
        implementation "com.google.android.gms:play-services-location:18.0.0"

        // Retrofit for API call
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

        // Logging Network Calls
        implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

        // Kotlin coroutines
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
        testImplementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-test', version: '1.4.3'

        // Unit tests
        testImplementation "junit:junit:4.13.2"
        testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation "org.robolectric:robolectric:4.5.1"
        testImplementation 'org.mockito:mockito-core:3.12.4'
        testImplementation "androidx.test:core:1.4.0"
        testImplementation 'org.mockito:mockito-inline:3.12.4'

        testImplementation "androidx.arch.core:core-testing:2.1.0"
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
        androidTestImplementation "org.mockito:mockito-android:3.12.4"
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: "2.0.9"
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: "2.0.9"

        // Room
        implementation "androidx.room:room-runtime:2.3.0"
        kapt "androidx.room:room-compiler:2.3.0"
        testImplementation "androidx.room:room-testing:2.3.0"

        // Koin
        implementation "io.insert-koin:koin-core:$koin_version"
        implementation "io.insert-koin:koin-android:$koin_version"
        testImplementation "io.insert-koin:koin-test:$koin_version"
        testImplementation "io.insert-koin:koin-test-junit4:$koin_version"
    }
}


static def findApiKey(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("platform-secrets.properties"))
    return "\"" + properties.getProperty(property) + "\""
}

tasks.create("versionName") {
    doLast { println("${project.version}") }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}